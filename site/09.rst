###################
대표차트에 범례 체크박스 옵션을 추가하고 차트 전체에 반영되도록 하기
###################

대표차트에서 범례 체크박스를 변경하면 다른 모든 차트에 적용되도록 만듭니다.


체크박스 옵션 적용을 위한 공식 위키문서 확인하기
=====================

- https://github.com/nhnent/tui.chart/blob/production/docs/wiki/features-legend.md



대표차트(도넛 차트)를 제외한 모든 차트의 범례 표시 영역을 감추기
=====================

대표 차트에서만 범례를 보이거나 보이지 않도록 설정하고 싶기 때문에 대표차트를 제외한 차트에서는 범례 체크박스 영역이 필요 없음으로 문서에서 확인한 :code:`legend.visible` 옵션을 활용하여 숨깁니다.

.. code-block:: javascript

  //...
  const barChartOptions = {
      ...
      legend: {
          visible: false
      }
  };

  ...
  const lineColumnOptions = {
      ...
      legend: {
          visible: false
      }
  };



대표차트(도넛 차트)에 차트에 레전더 체크박스 옵션 적용하기
=====================

.. code-block:: javascript

  //...
  const donutChartData = {
      legend: {
          visible: true,
          align: 'top'
      }
  };

이제 도넛차트 데이터 시리즈별로 체크박스가 생긴것을 확인할 수 있습니다.


체크 박스 전체 반영 기능을 구현하기 위하여 위키 문서를 참고하기
=====================

기능을 완성하기 위해서는 아래의 두가지 차트의 기능을 이용해야 합니다.

1. changeCheckedLegends 이벤트 탐지하기

- https://github.com/nhnent/tui.chart/blob/production/docs/wiki/features-legend.md#getting-checkbox-status-infomation-of-legend-when-checking-legend

2. setData API를 이용해 체크된 데이터만 표시하여 다시 그리기

- https://github.com/nhnent/tui.chart/blob/production/docs/wiki/features-chart.md#change-the-data-in-the-chart


체크박스 변경 이벤트 리스너 만들어를 구현하여 나머지 차트에 반영시키기
=====================

1. 문서를 참고하여 대표차트(도넛차트)의 changeCheckedLegends 이벤트를 구독하기.

.. code-block:: javascript

  donutChart.on('changeCheckedLegends', info => {
    console.log(info);
  });


2. 탐지된 이벤트의 checkedLegends 정보를 바탕으로 unchecked된 범례를 원본 데이터에 표시하여 재가공 하기.

원본 데이터의 Series 배열의 아이템에 visible 프로퍼티를 boolean으로 세팅하면 체크 상태를 변경할수 있습니다.

.. code-block:: javascript

  var data = {
      series: [
          {
              name: 'O',
              data: 234196,
              visible: true
          },
          {
              name: 'A',
              data: 292124,
              visible: false
          },
          ...
      ]
  };


아래의 예처럼 체크 상태를 변경하는 함수를 만듭니다.

.. code-block:: javascript

  function reflectedCheckedStatusData(checkedInfo, data) {
    const seriesData = data.series;
    data.series = seriesData.map(data, function(item, index) {
      item.visible = checkedInfo[index] ? true : false;

      return item;
    });

    return data;
  }

  
3. setData API를 이용해 가공한 데이터를 차트에 반영하기.

.. code-block:: javascript

  barChart.on('changeCheckedLegends', function(info) {
    console.log(info);
    const newData = reflectedCheckedStatusData(info, data);

    columnChart.rerender(newData);
  });
